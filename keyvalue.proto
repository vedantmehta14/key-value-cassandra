syntax = "proto3";

package keyvaluestore;

// Service for client-server communication
service KeyValueService {
  // Read a value by key
  rpc Get(GetRequest) returns (GetResponse);
  
  // Write a key-value pair
  rpc Put(PutRequest) returns (PutResponse);
  
  // Delete a key
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  
  // Get all keys (for debugging)
  rpc GetAllKeys(GetAllKeysRequest) returns (GetAllKeysResponse);
}

// Service for internal server-to-server communication
service InternalService {
  // Replicate a write to another server
  rpc ReplicateWrite(ReplicateWriteRequest) returns (ReplicateWriteResponse);
  
  // Forward a read to another server
  rpc ForwardRead(ForwardReadRequest) returns (ForwardReadResponse);
  
  // Send heartbeat with rank information
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// Request and response messages for KeyValueService

message GetRequest {
  string key = 1;
}

message GetResponse {
  bool success = 1;
  string value = 2;
  int64 timestamp = 3;
}

message PutRequest {
  string key = 1;
  string value = 2;
}

message PutResponse {
  bool success = 1;
  int64 timestamp = 2;
}

message DeleteRequest {
  string key = 1;
}

message DeleteResponse {
  bool success = 1;
}

message GetAllKeysRequest {
  // Empty request
}

message GetAllKeysResponse {
  repeated string keys = 1;
}

// Request and response messages for InternalService

message ReplicateWriteRequest {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
}

message ReplicateWriteResponse {
  bool success = 1;
  int64 timestamp = 2;
}

message ForwardReadRequest {
  string key = 1;
}

message ForwardReadResponse {
  bool success = 1;
  string value = 2;
  int64 timestamp = 3;
}

message HeartbeatRequest {
  int32 server_id = 1;
  int32 rank = 2;
}

message HeartbeatResponse {
  bool success = 1;
} 