syntax = "proto3";

package keyvaluestore;


service KeyValueService {

  rpc Get(GetRequest) returns (GetResponse);
  

  rpc Put(PutRequest) returns (PutResponse);
  

  rpc Delete(DeleteRequest) returns (DeleteResponse);
  

  rpc GetAllKeys(GetAllKeysRequest) returns (GetAllKeysResponse);
}


service InternalService {

  rpc ReplicateWrite(ReplicateWriteRequest) returns (ReplicateWriteResponse);
  

  rpc ForwardRead(ForwardReadRequest) returns (ForwardReadResponse);
  

  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  

  rpc RequestWorkSteal(WorkStealRequest) returns (WorkStealResponse);
  

  rpc GetServerStatus(ServerStatusRequest) returns (ServerStatusResponse);
}



message GetRequest {
  string key = 1;
}

message GetResponse {
  bool success = 1;
  string value = 2;
  int64 timestamp = 3;
}

message PutRequest {
  string key = 1;
  string value = 2;
}

message PutResponse {
  bool success = 1;
  int64 timestamp = 2;
}

message DeleteRequest {
  string key = 1;
}

message DeleteResponse {
  bool success = 1;
}

message GetAllKeysRequest {
  // Empty request
}

message GetAllKeysResponse {
  repeated string keys = 1;
}



message ReplicateWriteRequest {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
}

message ReplicateWriteResponse {
  bool success = 1;
  int64 timestamp = 2;
}

message ForwardReadRequest {
  string key = 1;
}

message ForwardReadResponse {
  bool success = 1;
  string value = 2;
  int64 timestamp = 3;
}

message HeartbeatRequest {
  int32 server_id = 1;
  int32 rank = 2;
}

message HeartbeatResponse {
  bool success = 1;
}


message WorkStealRequest {
  int32 requesting_server_id = 1;
  int32 requesting_server_rank = 2;
  int32 max_messages_to_steal = 3;
}

message WorkStealResponse {
  bool success = 1;
  repeated PendingMessage messages = 2;
}

message PendingMessage {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
  string operation_type = 4;  // "GET", "PUT", or "DELETE"
}

message ServerStatusRequest {
  int32 requesting_server_id = 1;
}

message ServerStatusResponse {
  int32 queue_length = 1;
  float cpu_utilization = 2;
  int32 active_requests = 3;
  int32 server_rank = 4;
} 